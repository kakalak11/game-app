{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\scripts\\out-of-date/assets\\scripts\\out-of-date\\keyboardScript.js"],"names":["Emitter","require","cc","Class","extends","Component","properties","_canMove","ctor","moveRightCommand","Command","moveRight","moveLeft","moveLeftCommand","moveDownCommand","moveDown","moveUp","moveUpCommand","action","Action","_onKeyDown","event","node","emit","instance","keyCode","macro","KEY","a","execute","d","w","s","space","log","getCommands","c","_reset","systemEvent","on","SystemEvent","EventType","KEY_DOWN","onLoad","registerEvent","value","touch","undo","current","commands","command","push","length","pop"],"mappings":"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","file":"keyboardScript.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\scripts\\out-of-date","sourcesContent":["// Learn cc.Class:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst Emitter = require('mEmitter');\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        _canMove: true,\r\n    },\r\n\r\n    ctor() {\r\n        this.moveRightCommand = new Command(this.moveRight, this.moveLeft);\r\n        this.moveLeftCommand = new Command(this.moveLeft, this.moveRight);\r\n        this.moveDownCommand = new Command(this.moveDown, this.moveUp);\r\n        this.moveUpCommand = new Command(this.moveUp, this.moveDown);\r\n\r\n        this.action = new Action();\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    _onKeyDown: function (event) {\r\n        // cc.warn('key down', this._canMove);\r\n        this.node.emit('setInput', false);\r\n        if (!this._canMove) return;\r\n        Emitter.instance.emit('canMove', false);\r\n        switch (event.keyCode) {\r\n            case cc.macro.KEY.a:\r\n                // Emitter.instance.emit('moveRow', false);\r\n                this.action.execute(this.moveLeftCommand);\r\n                Emitter.instance.emit('sound', 'swipe');\r\n                break;\r\n            case cc.macro.KEY.d:\r\n                // Emitter.instance.emit('moveRow', true);\r\n                this.action.execute(this.moveRightCommand);\r\n                Emitter.instance.emit('sound', 'swipe');\r\n                break;\r\n            case cc.macro.KEY.w:\r\n                // Emitter.instance.emit('moveCollumn', false);\r\n                this.action.execute(this.moveUpCommand);\r\n                Emitter.instance.emit('sound', 'swipe');\r\n                break;\r\n            case cc.macro.KEY.s:\r\n                // Emitter.instance.emit('moveCollumn', true);\r\n                this.action.execute(this.moveDownCommand);\r\n                Emitter.instance.emit('sound', 'swipe');\r\n                break;\r\n            case cc.macro.KEY.space:\r\n                Emitter.instance.emit('canMove');\r\n                cc.log(this.action.getCommands());\r\n                // this.action.undo();\r\n                break;\r\n            case cc.macro.KEY.c:\r\n                Emitter.instance.emit('lose');\r\n                break;\r\n            default:\r\n                Emitter.instance.emit('canMove');\r\n                break;\r\n        }\r\n    },\r\n\r\n    moveRight() { Emitter.instance.emit('moveRow', true) },\r\n    moveLeft() { Emitter.instance.emit('moveRow', false) },\r\n    moveDown() { Emitter.instance.emit('moveCollumn', true) },\r\n    moveUp() { Emitter.instance.emit('moveCollumn', false) },\r\n\r\n    _reset() {\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this._onKeyDown, this);\r\n    },\r\n\r\n    onLoad() {\r\n        Emitter.instance.registerEvent('canMove', (value = true) => this._canMove = value);\r\n        this.node.on('reset', this._reset, this);\r\n        this.node.on('setInput', (touch) => {\r\n            if (touch) this._canMove = false;\r\n        }, this)\r\n        Emitter.instance.registerEvent('start', () => cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this._onKeyDown, this));\r\n    },\r\n});\r\n\r\n\r\n// This is the game writer\r\nvar Command = cc.Class({\r\n    ctor(execute, undo) {\r\n        this.execute = execute;\r\n        this.undo = undo;\r\n    },\r\n});\r\n\r\n// This is the base director\r\nvar Action = cc.Class({\r\n    ctor() {\r\n        this.current = null;\r\n        this.commands = [];\r\n    },\r\n\r\n    execute(command) {\r\n        this.current = command;\r\n        this.commands.push(command);\r\n        command.execute();\r\n    },\r\n\r\n    undo() {\r\n        if (this.commands.length === 0) {\r\n            cc.log('undo list is empty');\r\n            return;\r\n        }\r\n        var command = this.commands.pop();\r\n        this.current = command;\r\n        command.undo();\r\n    },\r\n\r\n    getCommands() {\r\n        return this.commands;\r\n    }\r\n});"]}